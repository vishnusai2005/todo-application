const express = require('express')
const path = require('path')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const app = express()
const dbpath = path.join(__dirname, 'todoApplication.db')
let db = null
const intializeDBandServer = async () => {
  try {
    db = await open({
      filename: dbpath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server Running at http://localhost:3000/')
    })
  } catch (e) {
    console.log(`DB Error: ${e.message}`)
    process.exit(1)
  }
}
intializeDBandServer()
app.use(express.json())

const ans = dbObject => {
  return {
    id: dbObject.id,
    todo: dbObject.todo,
    priority: dbObject.priority,
    status: dbObject.status,
  }
}

const hasPriorityAndStatusProperties = requestQuery => {
  return (
    requestQuery.priority !== undefined && requestQuery.status !== undefined
  )
}

const hasPriorityProperty = requestQuery => {
  return requestQuery.priority !== undefined
}

const hasStatusProperty = requestQuery => {
  return requestQuery.status !== undefined
}
const hasTodoProperty = requestQuery => {
  return requestQuery.todo !== undefined
}

app.get('/todos/', async (request, response) => {
  let getTodosQuery = ''
  let data = null
  const {search_q = '', priority, status} = request.query

  switch (true) {
    case hasPriorityAndStatusProperties(request.query):
      getTodosQuery = `
     SELECT * 
     FROM todo 
     WHERE 
     todo LIKE '%${search_q}%'
     AND status = '${status}'
     AND priority = '${priority}'`
      break
    case hasPriorityProperty(request.query):
      getTodosQuery = `
     SELECT * 
     FROM todo 
     WHERE 
     todo LIKE '%${search_q}%'
     AND priority = '${priority}' `
      break
    case hasStatusProperty(request.query):
      getTodosQuery = `
      SELECT * 
      FROM todo 
      WHERE 
      todo LIKE '%${search_q}%'
      AND status = '${status}';
      `
      break
    default:
      getTodosQuery = `
      SELECT * 
      FROM todo 
      WHERE 
      todo LIKE '%${search_q}%' `
  }
  data = await db.all(getTodosQuery)
  response.send(data)
})

app.get('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const queryThree = `
  SELECT * 
  FROM todo 
  WHERE id = ${todoId}`
  const resultsOne = await db.get(queryThree)
  response.send(ans(resultsOne))
})

app.post('/todos/', async (request, response) => {
  const todoDetails = request.body
  const {id, todo, priority, status} = todoDetails
  const todoQueryFive = `
  INSERT INTO todo (id, todo, priority , status) 
  VALUES(
    ${id},
    '${todo}',
    '${priority}',
    '${status}'
  )`
  const dbResponseFive = await db.run(todoQueryFive)
  response.send('Todo Successfully Added')
})

app.put('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  let checkingOne = ''
  const requestBody = request.body
  switch (true) {
    case requestBody.status !== undefined:
      checkingOne = 'Status'
      break
    case requestBody.priority !== undefined:
      checkingOne = 'Priority'
      break
    case requestBody.todo !== undefined:
      checkingOne = 'Todo'
      break
  }
  const previousTodoQuery = `SELECT  * 
    FROM todo 
    WHERE id = ${todoId}`

  const previousTodo = await db.get(previousTodoQuery)
  const {
    todo = previousTodo.todo,
    priority = previousTodo.priority,
    status = previousTodo.status,
  } = request.body
  const updateTodoQueryFinal = `
    UPDATE
      todo
    SET
      todo='${todo}',
      priority='${priority}',
      status='${status}'
    WHERE
      id = ${todoId};`

  await db.run(updateTodoQueryFinal)
  response.send(`${checkingOne} Updated`)
})

app.delete('/todos/:todoId/', async (request, response) => {
  const {todoId} = request.params
  const deleteTodosQuery = `
  DELETE FROM
    todo
  WHERE
    id = ${todoId};`

  await db.run(deleteTodosQuery)
  response.send('Todo Deleted')
})

module.exports = app
